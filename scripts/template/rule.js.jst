import {} from './ast/index.js';
import {} from './fix/index.js';
import {} from './utils/index.js';

/**
@import {TSESTree as ESTree} from '@typescript-eslint/types';
@import * as ESLint from 'eslint';
*/

<% if (hasSuggestions) { %>
const MESSAGE_ID_ERROR = '<%= id %>/error';
const MESSAGE_ID_SUGGESTION = '<%= id %>/suggestion';
const messages = {
	[MESSAGE_ID_ERROR]: 'Prefer `{{replacement}}` over `{{value}}`.',
	[MESSAGE_ID_SUGGESTION]: 'Replace `{{value}}` with `{{replacement}}`.',
};
<% } else { %>
const MESSAGE_ID= '<%= id %>';
const messages = {
	[MESSAGE_ID]: 'Prefer `{{replacement}}` over `{{value}}`.',
};
<% } %>

/** @param {ESLint.Rule.RuleContext} context */
const create = context => {
	return {
		Literal(node) {
			if (node.value !== 'unicorn') {
				return;
			}

			return {
				node,
				messageId: <% if (hasSuggestions) { %>MESSAGE_ID_ERROR<% } else { %>MESSAGE_ID<% } %>,
				data: {
					value: 'unicorn',
					replacement: 'ðŸ¦„',
				},
				<% if (fixableType) { %>
				/** @param {ESLint.Rule.RuleFixer} fixer */
				fix: fixer => fixer.replaceText(node, '\'ðŸ¦„\''),
				<% } %>
				<% if (hasSuggestions) { %>
				suggest: [
					{
						messageId: MESSAGE_ID_SUGGESTION,
						data: {
							value: 'unicorn',
							replacement: 'ðŸ¦„',
						},
						/** @param {ESLint.Rule.RuleFixer} fixer */
						fix: fixer => fixer.replaceText(node, '\'ðŸ¦„\''),
					}
				],
				<% } %>
			};
		},
	};
};

/** @type {ESLint.Rule.RuleModule} */
const config = {
	create,
	meta: {
		type: '<%= type %>',
		docs: {
			description: '<%= description %>',
			recommended: 'unopinionated',
		},
		<% if (fixableType) { %>fixable: '<%= fixableType %>',<% } %>
		<% if (hasSuggestions) { %>hasSuggestions: true,<% } %>
		messages,
	},
};

export default config;
